/*****************
* Drawing mixins *
*****************/

// generic drawing of more complex things

@function _widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @if $c == none { @return none; }
  @else { @return 0 1px $c; }
}

@mixin lines($t, $c:$selected_bg_color) {
    @if $t==up {
      box-shadow: inset 0 -3px 0 0 darken($c,5%);
    }
    @if $t==down {
      box-shadow: inset 0 3px 0 0 darken($c,5%);
    }
    @if $t==both {
      box-shadow: inset 0 -3px 0 0 darken($c,5%),
                  inset 0 3px 0 0 darken($c,5%);
    }
}

@mixin _shadows($shadow1, $shadow2:none, $shadow3:none, $shadow4:none) {
//
// Helper function to stack up to 4 box-shadows;
//
  @if $shadow4!=none { box-shadow: $shadow1, $shadow2, $shadow3, $shadow4; }
  @else if $shadow3!=none { box-shadow: $shadow1, $shadow2, $shadow3; }
  @else if $shadow2!=none { box-shadow: $shadow1, $shadow2; }
  @else { box-shadow: $shadow1; }
}

// entries

@function entry_focus_border($fc:$selected_bg_color) {
  @if $variant == 'light' { @return $fc; }
  @else { @return if($fc==$selected_bg_color, $selected_borders_color, darken($fc, 35%)); }
}


@function entry_gradient($c) {
  @if $variant=='light' { @return linear-gradient(to bottom, mix($borders_color, $c, 45%),
                                                             mix($borders_color, $c, 3%) 2px,
                                                             $c 90%); }
  @else { @return linear-gradient(to bottom, mix($borders_color, $c, 95%),
                                             mix($borders_color, $c, 40%) 3px,
                                             $c 90%); }
}

@mixin entry($t, $fc:$selected_bg_color, $edge: none) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//

  $_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
    background-color: $base_color;
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==focus {
    border-color: entry_focus_border($fc);
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $insensitive_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_entry_edge;
  }
  @if $t==backdrop {
    color: $backdrop_text_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_base_color;
    box-shadow: $_blank_edge;
  }
  @if $t==backdrop-insensitive {
    color: $backdrop_insensitive_color;
    border-color: $insensitive_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_blank_edge;
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    box-shadow: none;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @if $t==osd-backdrop {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// buttons

@function _border_color ($c) { @return darken($c, 25%); } // colored buttons want
                                                         // the border form the
                                                         // base color

@function _text_shadow_color ($tc: $fg_color, $bg: $bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white, 1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black, $_lbg*0.8); }
}

@function _button_hilight_color($c) {
//
// calculate the right top hilight color for buttons
//
// $c: base color;
//
  @if lightness($c)>95% { @return white; }
  @else if lightness($c)>90% { @return transparentize(white, 0.2); }
  @else if lightness($c)>80% { @return transparentize(white, 0.4); }
  @else if lightness($c)>50% { @return transparentize(white, 0.6); }
  @else if lightness($c)>40% { @return transparentize(white, 0.8); }
  @else { @return transparentize(white, 0.95); }
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    -gtk-icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    -gtk-icon-shadow: 0 -1px $_shadow;
  }
}

@mixin button($t, $c:$base_color, $tc:$text_color, $edge: none) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//

  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge,1)));


  @if $t==rounded {
    box-shadow: none;
  //  border: 1px solid $c;
    color: white;
    border-radius: 4px;
    background: $suggested_bg_color; }

    @if $t==rounded-red {
      box-shadow: none;
    //  border: 1px solid $c;
      color: white;
      border-radius: 4px;
      background: $destructive_bg_color; 
    }
  
  @if $t==normal {
  //
  // normal button
  //
    font-weight: normal;
    color: $tc;
   // outline-color: transparentize($tc, 0.7);
    background-color: mix($bg_color, $base_color, 15%);
    text-shadow: none;
  }

  @else if $t==hover {
  //
  // hovered button
  //
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    background-color: $c;
    text-shadow: none;
    //@include _shadows(inset 0px 1px 0px 0px $top_highlight,inset 0px -1px 0px 0px $bottom_highlight);
  }

  @if $t==normal-header {
  //
  // normal button headerbar look
  //
  color: if($tc==$text_color, $headerbar_fg_color, $tc);
  border-radius: 4px;
  text-shadow: none;
  box-shadow: none;
  border: 1px solid $borders_color;
  background-color: lighten($headerbar_color, 4%);      
}

  @else if $t==hover-header {
  //
  // hovered button headerbar look
  //
  color: if($tc==$text_color, $selected_bg_color, $tc);
  text-shadow: none;
  background-color: transparentize($c, 0.3);
}

@else if $t==backdrop-header {
//
// backdrop button headerbar look
//
  color: if($tc==$text_color, transparentize($tc, 0.6), $tc);
  background-color: $c;
  text-shadow: none;
  box-shadow: none;
}


  @else if $t==active {
  //
  // pushed button
  //
  color: $tc;
  outline-color: transparentize($tc, 0.7);
  background-color: if($c==$base_color, $selected_bg_color, $c);
  text-shadow: none;
 // @include _shadows(inset 0px 1px 0px 0px $top_highlight,inset 0px -1px 0px 0px $bottom_highlight);
}
  @else if $t==insensitive {
  //
  // insensitive button
  //
  color: if($tc==$text_color, $backdrop_text_color, $tc);
  border-color: $insensitive_borders_color;
  background-color: if($c==$base_color, $insensitive_bg_color, $c);
  text-shadow: none;
}
  @else if $t==insensitive-active {
  //
  // insensitive pushed button
  //
  color: transparentize($selected_fg_color, 0.3);
  outline-color: transparentize($tc, 0.7);
  background-color: if($c==$base_color, $selected_bg_color, $c);
  text-shadow: none;
  label { color: transparentize($selected_fg_color, 0.3); }
}
  @else if $t==backdrop {
  //
  // backdrop button
  //
  color: if($tc==$text_color, $backdrop_text_color, transparentize($tc, 0.6));
  outline-color: transparentize($tc, 0.7);
  background-color: if($c==$base_color, $backdrop_base_color, $c);
  text-shadow: none;
}

  @else if $t==backdrop-active {
  //
  // backdrop pushed button FIXME no colors here!
  //
  color: transparentize($selected_fg_color, 0.3);
  outline-color: transparentize($tc, 0.7);
  background-color: $selected_bg_color;
  text-shadow: none;
  label { color: transparentize($selected_fg_color, 0.3); }
}

  @else if $t==backdrop-insensitive {
  //
  // backdrop insensitive button
  //
  color: if($tc==$text_color, $backdrop_text_color, $tc);
  border-color: $insensitive_borders_color;
  background-color: if($c==$base_color, $insensitive_bg_color, $c);
  text-shadow: none;
}

  @else if $t==backdrop-insensitive-active {
  //
  // backdrop insensitive pushed button
  //
  color: transparentize($selected_fg_color, 0.3);
  outline-color: transparentize($tc, 0.7);
  background-color: $selected_bg_color;
  text-shadow: none;
}

  @else if $t==osd {
  //
  // normal osd button
  //
    $_bg: if($c!=$base_color, transparentize($c, 0.5),
                            $osd_bg_color);

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: $_bg;
    background-clip: padding-box;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $t==osd-hover {
  //
  // active osd button
  //
    $_bg: if($c!=$base_color, transparentize($c, 0.3),
                            lighten($osd_bg_color, 12%));

    color: white;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $_bg, $_bg);
    background-clip: padding-box;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $t==osd-active {
  //
  // active osd button
  //
    $_bg: if($c!=$base_color, $c, lighten($osd_bg_color, 6%));

    color: white;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $_bg, $_bg);
    background-clip: padding-box;
    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $t==osd-insensitive {
  //
  // insensitive osd button
  //
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $osd_insensitive_bg_color, $osd_insensitive_bg_color);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @else if $t==osd-backdrop {
  //
  // backdrop osd button
  //
    $_bg: if($c!=$base_color, transparentize($c, 0.5),
                            $osd_bg_color);

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $_bg, $_bg);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    background-image: none;
    @include _shadows(inset 0 1px transparentize(white, 1),
                      $_blank_edge);

    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

@mixin trough($flat:false, $c:$bg_color, $tc:$fg_color, $noedge:true) {
  color: mix($tc, $bg_color, 80%);
  @if $flat { background-image: linear-gradient(to bottom, $c, $c); }
  @else {
    background-image: linear-gradient(to bottom,
                                      mix(black,$c,15%) 5%,
                                      mix(black,$c,10%) 20%,
                                      mix(black,$c,10%) 90%,
                                      $c);
  }

  border-color: if($c!=$bg_color, _border_color($c), $border_color);

  @if not($noedge) {
    @if lightness($c) > 60% {
      box-shadow: inset 0 -1px $borders_edge,
                  0 1px $borders_edge;
    }
    @else {
      box-shadow: inset 0 -1px transparentize($borders_edge, 0.5),
                  0 1px transparentize($borders_edge, 0.5);
    }
  }
  @else { box-shadow: none; }
}

@mixin headerbar_fill($c:$headerbar_color, $hc:$top_highlight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  $gradient: linear-gradient(to top, darken($c, 13%), darken($c, 2%) 2px, $c 3px);

  @if $variant == 'dark' { $gradient: linear-gradient(to top, darken($c, 3%), darken($c, 1%) 2px, $c 3px); }

  @if $ov != none { background: $c $ov, $gradient; }
  @else { background: $c $gradient; }

  box-shadow: inset 0 1px $hc; // top highlight
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==$fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: $fg_color;

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(transparentize($_small_gradient_color, 1)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(transparentize($_big_gradient_color, 0.87)),
                                to(transparentize($_big_gradient_color, 1)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: transparentize(black, 0.8);
  $_undershoot_color_light: transparentize(white, 0.8);

  $_gradient_dir: left;
  $_dash_bg_size: 10px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;
  box-shadow: none;
}


@mixin sidebar_bg ($dir, $c1, $c2) {


  background-image: linear-gradient(to $dir, $c1 40px,
                                    $c2 35px,$c2 36px,
                                    $c2 36px,$c2 99%, 
                                    $c2 100%);
}